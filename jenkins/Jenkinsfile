pipeline {
    agent any

    stages {
            stage('Clean up') {
            steps {
                // clean up the jenkins directory before 
                echo "cleaning up.."
                sh  'rm -rf project' 
            }
        }
        
         stage('Clone') {
            steps {
                // clone github repository & playbook
                git clone 'https://github.com/noaavisrur/alpaca-flask.git' 
                git  clone 'https://github.com/noaavisrur/Devops.git'
            }
        }
        
        stage('Zip Directory') {
            steps {
                // Zip the directory
                echo "ziping directory.."
               sh 'tar -czvf flask.tar.gz flask '
            }
        }
        
        stage('Push to S3') {
            steps {
                // Configure AWS credentials
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'noaavisrur']]) {
                    // Push the tar archive to S3 bucket
                    sh 'aws s3 cp flask.tar.gz s3://jenkins-first-project/flask.tar.gz'
                }
            }
        }
         stage('Start EC2 Instance') {
            steps {
                // Configure AWS credentials
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'noaavisrur']]) {
                // Install AWS CLI (if not already installed)
                    sh 'pip install awscli --upgrade --user'
                    // Start EC2 instance
                    sh 'aws ec2 start-instances --instance-ids i-0cfdbf11a0eef79f0 --region us-east-1'
                    //Clean up ec2-user flaskrun directory
                       sshagent(['noaavisrurssh']) {
                         sh "ssh -i ${env.ssh_key} -o StrictHostKeyChecking=no ec2-user@${env.test_server_ip} 'find /home/ec2-user/flaskrun -mindepth 1 -delete && rm /home/ec2-user/flask.tar.gz'"
        }
      }
     }
    }
      stage('Copy from S3 to EC2 Instance') {
    steps {
        // Configure AWS credentials
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'noaavisrur']]) {
            // Copy the file from S3 to Jenkins workspace
            sh 'aws s3 cp s3://jenkins-first-project/flask.tar.gz /var/lib/jenkins'
    // Copy the file from Jenkins workspace to EC2 instance using SSH
            sshagent(['noaavisrurssh']) {
                sh "scp -i  ${env.ssh_key}  /var/lib/jenkins/flask.tar.gz ec2-user@${env.test_server_ip}:/home/ec2-user"
                //create directory with copied flask file
        sh "ssh -i ${env.ssh_key} ec2-user@${env.test_server_ip} 'cd /home/ec2-user && cp flask.tar.gz /home/ec2-user/flaskrun'"
                //extarct tar flask
        sh "ssh -i ${env.ssh_key} ec2-user@${env.test_server_ip} 'cd /home/ec2-user/flaskrun && tar xfzv flask.tar.gz '"
      }
    }
  }
}
stage('installing packages') {
  steps {
    // Configure AWS credentials
    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'noaavisrur']]) {
      // Extract tar file in AWS EC2
          sshagent(credentials: ['noaavisrurssh']) {
             sh "ssh -i ${env.ssh_key} ec2-user@${env.test_server_ip} 'sudo dnf install ansible'"
             sh "ssh -i ${env.ssh_key} ec2-user@${env.test_server_ip} 'sudo dnf install git -y'"
      }
    }
  }
}
stage('testing') {
  steps {
    // Configure AWS credentials
    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'noaavisrur']]) {
        //run playbook 
        sh 'ansible-playbook -i /var/lib/jenkins/workspace/project/Devops/inventory.ini /var/lib/jenkins/workspace/project/Devops/jenkins_playbook '
         sshagent(credentials: ['noaavisrurssh']) {
           //clean up for test script
              sh "ssh -i ${env.ssh_key} ec2-user@${env.test_server_ip} 'rm -rf /home/ec2-user/Devops'"   
              sh "ssh -i ${env.ssh_key} ec2-user@${env.test_server_ip} 'cd /home/ec2-user/Devops/jenkins && bash test_script.sh'" 
      }
    }
   }
  }  
 }
}

  
